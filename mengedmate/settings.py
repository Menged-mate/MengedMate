"""
Django settings for mengedmate project.

Generated by 'django-admin startproject' using Django 6.0.dev20250507143605.

For more information on this file, see
https://docs.djangoproject.com/en/dev/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/dev/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from datetime import timedelta
from dotenv import load_dotenv

load_dotenv()

BASE_DIR = Path(__file__).resolve().parent.parent


SECRET_KEY = os.environ.get('SECRET_KEY', "django-insecure-y!$8furov9c90*rxcky-y-+1@mh(wj_w(o9@#2bt-_aq97&kr!")

DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1,.onrender.com').split(',')



INSTALLED_APPS = [
    "jazzmin",

    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",

    # Third-party apps
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",

    # Social providers
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.facebook",
    "allauth.socialaccount.providers.apple",
    "dj_rest_auth",
    "dj_rest_auth.registration",

    "authentication",
    "charging_stations",
    "payments",
    "ocpp_integration",
    "support",
]

JAZZMIN_SETTINGS = {
    "site_title": "MengedMate Admin",

    "site_header": "MengedMate",

    "site_brand": "MengedMate",

    "site_logo": None,

    "login_logo": None,

    "site_logo_classes": "img-circle",

    "site_icon": None,

    "welcome_sign": "Welcome to MengedMate Admin",

    "copyright": "MengedMate Ltd",


    "search_model": ["authentication.CustomUser", "charging_stations.ChargingStation"],

    "user_avatar": None,

    "topmenu_links": [
        {"name": "Home", "url": "admin:index", "permissions": ["auth.view_user"]},

        {"name": "Support", "url": "https://github.com/yourusername/mengedmate/issues", "new_window": True},

        {"model": "authentication.CustomUser"},

        {"app": "charging_stations"},
    ],


    "usermenu_links": [
        {"name": "Support", "url": "https://github.com/Megedmate/mengedmate/issues", "new_window": True},
        {"model": "auth.user"}
    ],


    "show_sidebar": True,

    "navigation_expanded": True,


    "hide_apps": [],


    "hide_models": [],

    "order_with_respect_to": ["authentication", "charging_stations"],


    "icons": {
        "auth": "fas fa-users-cog",
        "auth.user": "fas fa-user",
        "auth.Group": "fas fa-users",
        "authentication.CustomUser": "fas fa-user-circle",
        "charging_stations.ChargingStation": "fas fa-charging-station",
    },

    "default_icon_parents": "fas fa-chevron-circle-right",
    "default_icon_children": "fas fa-circle",


    "related_modal_active": True,


    "custom_css": None,
    "custom_js": None,


    "show_ui_builder": False,


    "changeform_format": "horizontal_tabs",

    "changeform_format_overrides": {
        "auth.user": "collapsible",
        "auth.group": "vertical_tabs",
    },
}

JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": False,
    "footer_small_text": False,
    "body_small_text": False,
    "brand_small_text": False,
    "brand_colour": "navbar-primary",
    "accent": "accent-primary",
    "navbar": "navbar-dark",
    "no_navbar_border": False,
    "navbar_fixed": True,
    "layout_boxed": False,
    "footer_fixed": False,
    "sidebar_fixed": True,
    "sidebar": "sidebar-dark-primary",
    "sidebar_nav_small_text": False,
    "sidebar_disable_expand": False,
    "sidebar_nav_child_indent": True,
    "sidebar_nav_compact_style": False,
    "sidebar_nav_legacy_style": False,
    "sidebar_nav_flat_style": False,
    "theme": "default",
    "dark_mode_theme": None,
    "button_classes": {
        "primary": "btn-primary",
        "secondary": "btn-secondary",
        "info": "btn-info",
        "warning": "btn-warning",
        "danger": "btn-danger",
        "success": "btn-success"
    }
}

SITE_ID = 1

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "authentication.middleware.AuthenticationBypassMiddleware",
]

ROOT_URLCONF = "mengedmate.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "mengedmate.wsgi.application"



database_url = os.environ.get('DATABASE_URL')
if database_url:
    DATABASES = {
        'default': dj_database_url.config(
            default=database_url,
            conn_max_age=600
        )
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }




AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]



LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True




STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'


static_dir = os.path.join(BASE_DIR, 'static')
# Create static directory only if we have permissions
try:
    if not os.path.exists(static_dir):
        os.makedirs(static_dir)
except PermissionError:
    pass  # Skip if we don't have permissions

STATICFILES_DIRS = [
    static_dir,
]



DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "authentication.CustomUser"

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'authentication.authentication.BypassableTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_THROTTLE_CLASSES': [],
    'DEFAULT_THROTTLE_RATES': {
        'anon': None,
        'user': None,
    },
    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
}

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

# CORS_ALLOWED_ORIGINS = [
#     'http://localhost:3000',
#     'http://localhost:8000',
#     'http://localhost:65389',  # Flutter web dev server
#     'https://mengedmate.vercel.app',
#     'https://mengedmate-pf4ncgtkj-mengedmate.vercel.app',
#     'https://mengedmate.com'
# ]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'access-control-allow-origin',
    'access-control-allow-headers',
    'access-control-allow-methods',
    'access-control-max-age',
    'access-control-allow-credentials',
]


CORS_PREFLIGHT_MAX_AGE = 86400
CORS_EXPOSE_HEADERS = ['Content-Type', 'X-CSRFToken']


SECURE_SSL_REDIRECT = False
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False
SECURE_BROWSER_XSS_FILTER = False
SECURE_CONTENT_TYPE_NOSNIFF = False
CSRF_USE_SESSIONS = False
CSRF_COOKIE_HTTPONLY = False

CSRF_TRUSTED_ORIGINS = [
    'https://*.vercel.app',
    'https://mengedmate-pf4ncgtkj-mengedmate.vercel.app',
    'https://*.mengedmate.com',
    'http://localhost:3000',
    'http://localhost:8000'
]

CSRF_HEADER_NAME = 'X-CSRFTOKEN'
CSRF_COOKIE_NAME = 'csrftoken'

CSRF_COOKIE_SAMESITE = None

# Email Configuration
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    print("Using console email backend for development")
else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = 'smtp.gmail.com'
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')

# Email Settings
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'MengedMate <noreply@mengedmate.com>')
EMAIL_SUBJECT_PREFIX = '[MengedMate] '
EMAIL_TIMEOUT = 60

# Frontend URL for email links (will be overridden below)


ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True


SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': os.environ.get('GOOGLE_CLIENT_ID', ''),
            'secret': os.environ.get('GOOGLE_CLIENT_SECRET', ''),
            'key': ''
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    },
    'facebook': {
        'APP': {
            'client_id': os.environ.get('FACEBOOK_CLIENT_ID', ''),
            'secret': os.environ.get('FACEBOOK_CLIENT_SECRET', ''),
            'key': ''
        },
        'SCOPE': [
            'email',
            'public_profile',
        ],
        'FIELDS': [
            'id',
            'email',
            'name',
            'first_name',
            'last_name',
            'picture',
        ],
    },
    'apple': {
        'APP': {
            'client_id': os.environ.get('APPLE_CLIENT_ID', ''),
            'secret': os.environ.get('APPLE_CLIENT_SECRET', ''),
            'key': os.environ.get('APPLE_KEY_ID', ''),
            'certificate_key': os.environ.get('APPLE_CERTIFICATE_KEY', '')
        },
        'SCOPE': [
            'email',
            'name',
        ],
    }
}


SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_QUERY_EMAIL = True
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_ADAPTER = 'authentication.adapters.CustomSocialAccountAdapter'


REST_USE_JWT = True
JWT_AUTH_COOKIE = 'mengedmate-auth'
JWT_AUTH_REFRESH_COOKIE = 'mengedmate-refresh'


REST_AUTH = {
    'USER_DETAILS_SERIALIZER': 'authentication.serializers.CustomUserDetailsSerializer',
    'REGISTER_SERIALIZER': 'authentication.serializers.CustomRegisterSerializer',
    'LOGIN_SERIALIZER': 'authentication.serializers.CustomLoginSerializer',
}

ACCOUNT_ADAPTER = 'authentication.adapters.CustomAccountAdapter'
REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'authentication.serializers.CustomRegisterSerializer',
}


ACCOUNT_USER_MODEL_USERNAME_FIELD = None

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

FRONTEND_URL = os.environ.get('FRONTEND_URL', 'https://mengedmate.vercel.app')
if DEBUG:
    FRONTEND_URL = 'http://localhost:3000'

ADMIN_EMAIL = 'admin@example.com'

GOOGLE_MAPS_API_KEY = os.environ.get('GOOGLE_MAPS_API_KEY', '')

API_BASE_URL = os.environ.get('API_BASE_URL', 'https://mengedmate.onrender.com')

CHAPA_SETTINGS = {
    'SECRET_KEY': os.environ.get('CHAPA_SECRET_KEY', 'CHASECK_TEST-BjSm5vKqLLOfYqar7ilo0E1vyz6sagAe'),
    'PUBLIC_KEY': os.environ.get('CHAPA_PUBLIC_KEY', 'CHAPUBK_TEST-5FVf5w5JfADqLQsB4xk3b6jXQEdeb7EF'),
    'CALLBACK_URL': os.environ.get('CHAPA_CALLBACK_URL', f'{API_BASE_URL}/payments/callback/'),
    'RETURN_URL': os.environ.get('CHAPA_RETURN_URL', f'{FRONTEND_URL}/payment/success'),
    'SANDBOX_URL': 'https://api.chapa.co',
    'PRODUCTION_URL': 'https://api.chapa.co',
    'USE_SANDBOX': os.environ.get('CHAPA_USE_SANDBOX', 'True').lower() == 'true',
}

OCPP_SETTINGS = {
    'BASE_URL': os.environ.get('OCPP_BASE_URL', 'http://localhost:8000'),
    'WEBSOCKET_URL': os.environ.get('OCPP_WEBSOCKET_URL', 'ws://localhost:8000/ws/ev-locator/'),
    'WEBHOOK_URL': os.environ.get('OCPP_WEBHOOK_URL', f'{API_BASE_URL}/api/ocpp/webhook/'),
    'API_KEY': os.environ.get('OCPP_API_KEY', ''),
    'TIMEOUT': int(os.environ.get('OCPP_TIMEOUT', '30')),
    'RETRY_ATTEMPTS': int(os.environ.get('OCPP_RETRY_ATTEMPTS', '3')),
}