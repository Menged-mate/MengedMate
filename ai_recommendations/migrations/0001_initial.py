# Generated by Django 4.2.21 on 2025-06-07 10:40

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("charging_stations", "0009_stationreview"),
    ]

    operations = [
        migrations.CreateModel(
            name="UserSearchPreferences",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "default_search_radius_km",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("10.00"),
                        help_text="Default search radius in kilometers",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("1.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                    ),
                ),
                (
                    "preferred_charging_speed",
                    models.CharField(
                        choices=[
                            ("slow", "Slow (3-7 kW)"),
                            ("fast", "Fast (7-22 kW)"),
                            ("rapid", "Rapid (22-50 kW)"),
                            ("ultra_rapid", "Ultra Rapid (50+ kW)"),
                            ("any", "Any Speed"),
                        ],
                        default="any",
                        max_length=20,
                    ),
                ),
                (
                    "preferred_amenities",
                    models.TextField(
                        blank=True,
                        help_text="JSON array of preferred amenity IDs",
                        null=True,
                    ),
                ),
                (
                    "price_sensitivity",
                    models.CharField(
                        choices=[
                            ("low", "Price is not important"),
                            ("medium", "Moderate price sensitivity"),
                            ("high", "Very price sensitive"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                (
                    "preferred_charging_times",
                    models.TextField(
                        blank=True,
                        help_text="JSON object with preferred charging time slots",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="search_preferences",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ReviewSentimentAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "overall_sentiment",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Overall sentiment score (0=negative, 1=positive)",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.000")),
                            django.core.validators.MaxValueValidator(Decimal("1.000")),
                        ],
                    ),
                ),
                (
                    "charging_speed_sentiment",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=4, null=True
                    ),
                ),
                (
                    "reliability_sentiment",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=4, null=True
                    ),
                ),
                (
                    "location_sentiment",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=4, null=True
                    ),
                ),
                (
                    "amenities_sentiment",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=4, null=True
                    ),
                ),
                (
                    "price_sentiment",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=4, null=True
                    ),
                ),
                (
                    "positive_keywords",
                    models.TextField(
                        blank=True,
                        help_text="JSON array of positive keywords",
                        null=True,
                    ),
                ),
                (
                    "negative_keywords",
                    models.TextField(
                        blank=True,
                        help_text="JSON array of negative keywords",
                        null=True,
                    ),
                ),
                (
                    "confidence_score",
                    models.DecimalField(
                        decimal_places=3,
                        default=Decimal("0.500"),
                        help_text="AI confidence in the analysis (0-1)",
                        max_digits=4,
                    ),
                ),
                (
                    "analysis_model_version",
                    models.CharField(default="v1.0", max_length=50),
                ),
                ("analyzed_at", models.DateTimeField(auto_now_add=True)),
                (
                    "review",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="charging_stations.stationreview",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserRecommendationHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("recommended_at", models.DateTimeField(auto_now_add=True)),
                (
                    "recommendation_score",
                    models.DecimalField(decimal_places=2, max_digits=5),
                ),
                (
                    "recommendation_rank",
                    models.PositiveIntegerField(
                        help_text="Position in recommendation list"
                    ),
                ),
                ("was_clicked", models.BooleanField(default=False)),
                ("was_visited", models.BooleanField(default=False)),
                ("was_used_for_charging", models.BooleanField(default=False)),
                (
                    "user_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="User's rating of the recommendation (1-5)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("feedback_text", models.TextField(blank=True, null=True)),
                ("clicked_at", models.DateTimeField(blank=True, null=True)),
                ("visited_at", models.DateTimeField(blank=True, null=True)),
                ("charged_at", models.DateTimeField(blank=True, null=True)),
                (
                    "station",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="charging_stations.chargingstation",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-recommended_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "-recommended_at"],
                        name="ai_recommen_user_id_7b93f1_idx",
                    ),
                    models.Index(
                        fields=["station", "-recommended_at"],
                        name="ai_recommen_station_e67296_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="StationRecommendationScore",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "overall_score",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                    ),
                ),
                (
                    "compatibility_score",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "distance_score",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "availability_score",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "review_sentiment_score",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "amenities_score",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "price_score",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "reliability_score",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                ("calculation_timestamp", models.DateTimeField(auto_now=True)),
                (
                    "user_location_lat",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                (
                    "user_location_lng",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                ("recommendation_reason", models.TextField(blank=True, null=True)),
                (
                    "station",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="charging_stations.chargingstation",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-overall_score", "-calculation_timestamp"],
                "indexes": [
                    models.Index(
                        fields=["user", "-overall_score"],
                        name="ai_recommen_user_id_50851c_idx",
                    ),
                    models.Index(
                        fields=["station", "-overall_score"],
                        name="ai_recommen_station_103b55_idx",
                    ),
                    models.Index(
                        fields=["-calculation_timestamp"],
                        name="ai_recommen_calcula_5ebb0f_idx",
                    ),
                ],
                "unique_together": {("user", "station")},
            },
        ),
    ]
